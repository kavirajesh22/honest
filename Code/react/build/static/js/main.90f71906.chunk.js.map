{"version":3,"sources":["honest.png","Components/FactChecker/checker.js","App.js","serviceWorker.js","Components/Header/header.js","Components/Footer/footer.js","index.js"],"names":["FactChecker","props","CheckFact","event","preventDefault","fetch","encodeURIComponent","state","factString","then","response","text","console","log","setState","factStatus","catch","err","factTextChangeHandler","target","value","onSubmit","this","type","onChange","React","Component","App","className","src","logo","alt","Boolean","window","location","hostname","match","Header","class","Footer","routing","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"yNAAe,MAA0B,mC,wCCiD1BA,E,kDA7Cd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAQPC,UAAY,SAACC,GACZA,EAAMC,iBAEHC,MAAM,mBAAD,OAAoBC,mBAAmB,EAAKC,MAAMC,aAAe,CACpE,OAAU,QAEXC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACLE,QAAQC,IAAIH,GACf,EAAKI,SAAS,CAACC,WAAYL,OAExBM,OAAM,SAAAC,GACLL,QAAQC,IAAII,OArBC,EAyBnBC,sBAAwB,SAACf,GACxB,EAAKW,SAAS,CAACN,WAAYL,EAAMgB,OAAOC,SAxBxC,EAAKb,MAAQ,CACZQ,WAAY,SACZP,WAAY,6BAJK,E,0CA6BnB,WACC,OACC,6BACA,0BAAMa,SAAUC,KAAKpB,WACV,2BACEqB,KAAK,OACLC,SAAUF,KAAKJ,wBAEjB,2BAAOK,KAAK,SAASH,MAAM,YAEhC,oCAAUE,KAAKf,MAAMQ,WAArB,U,GAzCiBU,IAAMC,WCejBC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,kBAAC,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRSC,MAPf,WACE,OACE,yBAAKC,MAAM,UAAX,WCKWC,MARf,WACE,OACE,yBAAKD,MAAM,UACT,qDCIAE,EACJ,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWhB,KAEnC,kBAAC,EAAD,QAMNiB,IAASC,OAAOL,EAASM,SAASC,eAAe,W","file":"static/js/main.90f71906.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/honest.ad4128bb.png\";","import React from \"react\";\n\nclass FactChecker extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tfactStatus: 'Verify',\n\t\t\tfactString: 'Enter your Text to verify',\n\t\t};\n\t}\n\n\n\tCheckFact = (event) => {\n\t\tevent.preventDefault();\n\n\t    fetch(`/CheckFact?fact=${encodeURIComponent(this.state.factString)}`, {\n\t      \"method\": \"GET\"\n\t    })\n\t    .then(response => response.text())\n\t    .then(response => {\n\t    \tconsole.log(response);\n\t\t\tthis.setState({factStatus: response});\n\t    })\n\t    .catch(err => {\n\t      console.log(err);\n\t    });\n\t}\n\n\tfactTextChangeHandler = (event) => {\n\t\tthis.setState({factString: event.target.value});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t<form onSubmit={this.CheckFact} >\n              <input\n                type=\"text\"\n                onChange={this.factTextChangeHandler}\n              />\n              <input type='submit' value=\"verify\" />\n\t        </form>\n\t        <strong> {this.state.factStatus} </strong>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default FactChecker;\n","import React from 'react';\nimport logo from './honest.png';\nimport './App.css';\nimport FactChecker from \"./Components/FactChecker/checker\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <FactChecker /> \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nfunction Header() {\n  return (\n    <div class=\"header\">\n      HONEST\n    </div>\n  );\n}\nexport default Header;","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <div class=\"footer\">\n      <h1>Information Matters</h1>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Header from \"./Components/Header/header\";\nimport Footer from \"./Components/Footer/footer\";\n\nconst routing = (\n  <Router>\n    <div>\n      <Header />\n      <hr />\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n      </Switch>\n      <Footer />\n    </div>\n  </Router>\n);\n\n\nReactDOM.render(routing, document.getElementById(\"root\"));\n"],"sourceRoot":""}